
#!/usr/bin/python
#
# Copyright 2011 Google Inc. All Rights Reserved.

"""A simple guest book app that demonstrates the App Engine search API."""



_INDEX_NAME = 'greeting'

# _ENCODE_TRANS_TABLE = string.maketrans('-: .@', '_____')

@app.route('/search', methods=['GET'])
def search():
		"""Handles a get request with a query."""
		uri = urlparse(self.request.uri)
		query = ''
		if uri.query:
		    query = parse_qs(uri.query)
		    query = query['query'][0]

		# sort results by author descending
		expr_list = [search.SortExpression(
		    expression='author', default_value='',
		    direction=search.SortExpression.DESCENDING)]
		# construct the sort options
		sort_opts = search.SortOptions(
		     expressions=expr_list)
		query_options = search.QueryOptions(
		    limit=77,
		    sort_options=sort_opts)
		query_obj = search.Query(query_string=query, options=query_options)
		results = search.Index(name=_INDEX_NAME).search(query=query_obj)
		if users.get_current_user():
		    url = users.create_logout_url(self.request.uri)
		    url_linktext = 'Logout'
		else:
		    url = users.create_login_url(self.request.uri)
		    url_linktext = 'Login'

		template_values = {
		    'results': results,
		    'number_returned': len(results.results),
		    'url': url,
		    'url_linktext': url_linktext,
		}
		render_html("treemgr\templates\search.html", template_values)


def CreateDocument(author, content):
		"""Creates a search.Document from content written by the author."""
		if author:
		    nickname = author.nickname().split('@')[0]
		else:
		    nickname = 'anonymous'
		# Let the search service supply the document id.
		return search.Document(
		    fields=[search.TextField(name='author', value=nickname),
		            search.TextField(name='comment', value=content),
		            search.DateField(name='date', value=datetime.now().date())])


@app.route('/searchresults', methods=['POST'])
def searchresults():
		"""Handles a post request."""
		author = None
		if users.get_current_user():
		    author = users.get_current_user()

		content = self.request.get('content')
		query = self.request.get('search')
		if content:
		    search.Index(name=_INDEX_NAME).put(CreateDocument(author, content))
		if query:
		    self.redirect('/admin/search?' + urllib.urlencode(
		        #{'query': query}))
		        {'query': query.encode('utf-8')}))
		else:
		    self.redirect('/admin/search')
